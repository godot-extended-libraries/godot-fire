#!/usr/bin/env python

Import("env")

env_crashpad = env.Clone()

# Based on https://github.com/qedsoftware/mini_chromium/blob/hunter/CMakeLists.txt
thirdparty_chromium_mini_dir = "#thirdparty/crashpad/crashpad/third_party/mini_chromium/mini_chromium/"
thirdparty_chromium_mini_sources = [
    "base/debug/alias.cc",
    "base/files/file_path.cc",
    "base/files/scoped_file.cc",
    "base/logging.cc",
    "base/process/memory.cc",
    "base/rand_util.cc",
    "base/strings/string16.cc",
    "base/strings/string_number_conversions.cc",
    "base/strings/stringprintf.cc",
    "base/strings/utf_string_conversion_utils.cc",
    "base/strings/utf_string_conversions.cc",
    "base/synchronization/lock.cc",
    "base/third_party/icu/icu_utf.cc",
    "base/threading/thread_local_storage.cc",
]

# # if(WIN32)
thirdparty_chromium_mini_sources = thirdparty_chromium_mini_sources + [
    "base/strings/string_util_win.cc",
    #       "base/strings/string_util_win.h",",
    "base/synchronization/lock_impl_win.cc",
    "base/threading/thread_local_storage_win.cc",
]
# # else()
# #   list(
# #       APPEND
# #       sources
# #       "base/files/file_util_posix.cc",
# #       "base/posix/eintr_wrapper.h",",
# #       "base/posix/safe_strerror.cc",
# #       "base/posix/safe_strerror.h",",
# #       "base/strings/string_util_posix.h",",
# #       "base/synchronization/condition_variable_posix.cc",
# #       "base/synchronization/lock_impl_posix.cc",
# #       "base/threading/thread_local_storage_posix.cc",
# #   )
# # endif()

# # if(APPLE)
# #   list(
# #       APPEND
# #       sources
# #       "base/atomicops_internals_mac.h",",
# #       "base/mac/close_nocancel.cc",
# #       "base/mac/foundation_util.h",",
# #       "base/mac/foundation_util.mm
# #       "base/mac/mach_logging.cc",
# #       "base/mac/mach_logging.h",",
# #       "base/mac/scoped_cftyperef.h",",
# #       "base/mac/scoped_ioobject.h",",
# #       "base/mac/scoped_launch_data.h",",
# #       "base/mac/scoped_mach_port.cc",
# #       "base/mac/scoped_mach_port.h",",
# #       "base/mac/scoped_mach_vm.cc",
# #       "base/mac/scoped_mach_vm.h",",
# #       "base/mac/scoped_nsautorelease_pool.h",",
# #       "base/mac/scoped_nsautorelease_pool.mm
# #       "base/mac/scoped_nsobject.h",",
# #       "base/mac/scoped_typeref.h",",
# #       "base/strings/sys_string_conversions_mac.mm
# #   )
# # endif()

# # add_library(base ${sources})
# # target_include_directories(
# #     base PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>"
# # )

# # if(MSVC)
env_crashpad.Append(CPPFLAGS=["-DPUBLIC"])
env_crashpad.Append(CPPFLAGS=["-D_HAS_EXCEPTIONS=0"])
env_crashpad.Append(CPPFLAGS=["-D_CRT_SECURE_NO_WARNINGS"])
env_crashpad.Append(CPPFLAGS=["-DNOMINMAX"])
env_crashpad.Append(CPPFLAGS=["-DWIN32_LEAN_AND_MEAN"])
env_crashpad.Append(CPPFLAGS=["-D_UNICODE"])
env_crashpad.Append(CPPFLAGS=["-DUNICODE"])
#   )
# # else()
# #   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")
# #   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
# # endif()

# # string(COMPARE EQUAL "${CMAKE_SYSTEM_NAME}" "Linux" is_linux)
# # if(is_linux)
# #   target_compile_definitions(base PUBLIC "_FILE_OFFSET_BITS=64")
# # endif()

# # if(APPLE)
# #   target_link_libraries(base PUBLIC "-framework CoreFoundation")
# #   target_link_libraries(base PUBLIC "-framework CoreGraphics")
# #   target_link_libraries(base PUBLIC "-framework CoreText")
# #   target_link_libraries(base PUBLIC "-framework Foundation")
# #   target_link_libraries(base PUBLIC "-framework Security")
# # endif()

thirdparty_chromium_mini_sources = [thirdparty_chromium_mini_dir + file for file in thirdparty_chromium_mini_sources]
env_crashpad.add_source_files(env.drivers_sources, thirdparty_chromium_mini_sources)

thirdparty_crashpad_dir = "#thirdparty/crashpad/crashpad/"
thirdparty_crashpad_sources = [
    "client/annotation.cc",
    "client/annotation_list.cc",
    "client/crash_report_database.cc",
    "client/crashpad_info.cc",
    "client/prune_crash_reports.cc",
    "client/settings.cc",
]

# if(APPLE)
#     list(
#         APPEND
#         client_sources
#         client/crash_report_database_mac.mm
#         client/crashpad_client_mac.cc",
#         client/simulate_crash_mac.cc",
#         client/simulate_crash_mac.h",
#     )
# endif()

# if (UNIX AND NOT APPLE)
#     list(
#         APPEND
#         client_sources
#         client/crashpad_client_linux.cc",
#         client/crashpad_client_linux.h",
#         client/client_argv_handling.cc",
#         client/client_argv_handling.h",
#         client/crashpad_info_note.S
#     )
# endif()

# if(WIN32)
thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "client/crash_report_database_win.cc",
    "client/crashpad_client_win.cc",
    # "client/simulate_crash_win.h",",
]
# endif()

# if(WIN32)
env_crashpad.Append(CPPFLAGS=["-DPUBLIC"])
env_crashpad.Append(CPPFLAGS=["-D_CRT_SECURE_NO_WARNINGS"])
env_crashpad.Append(CPPFLAGS=["-DNOMINMAX"])
env_crashpad.Append(CPPFLAGS=["-DWIN32_LEAN_AND_MEAN"])
env_crashpad.Append(CPPFLAGS=["-D_UNICODE"])
env_crashpad.Append(CPPFLAGS=["-DUNICODE"])
# env_crashpad.Append(CPPFLAGS=["-DNTDDI_VERSION=NTDDI_VISTA"])
# env_crashpad.Append(CPPFLAGS=["-D_WIN32_WINNT=_WIN32_WINNT_VISTA"])
# env_crashpad.Append(CPPFLAGS=["-DWINVER=_WIN32_WINNT_VISTA"])
env_crashpad.Append(CPPFLAGS=["-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS"])
env_crashpad.Append(CPPFLAGS=["-DCRASHPAD_ZLIB_SOURCE_EXTERNAL"])
# endif()

thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "handler/crash_report_upload_thread.cc",
    # "handler/crash_report_upload_thread.h",",
    "handler/main.cc",
    "handler/handler_main.cc",
    # "handler/handler_main.h",",
    "handler/minidump_to_upload_parameters.cc",
    # "handler/minidump_to_upload_parameters.h",",
    "handler/prune_crash_reports_thread.cc",
    # "handler/prune_crash_reports_thread.h",",
    "handler/user_stream_data_source.cc",
    # "handler/user_stream_data_source.h",",
]

# if(APPLE)
#     list(
#         APPEND
#         handler_sources
#         "handler/mac/crash_report_exception_handler.cc",
#         "handler/mac/crash_report_exception_handler.h",
#         "handler/mac/exception_handler_server.cc",
#         "handler/mac/exception_handler_server.h",
#         "handler/mac/file_limit_annotation.cc",
#         "handler/mac/file_limit_annotation.h",
#         )
# endif()

# if(UNIX AND NOT APPLE)
#     list(
#         APPEND
#         handler_sources
#         "handler/linux/crash_report_exception_handler.cc",
#         "handler/linux/crash_report_exception_handler.h",
#         "handler/linux/exception_handler_server.cc",
#         "handler/linux/exception_handler_server.h",
#         )
# endif()

# if(WIN32)
thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "handler/win/crash_report_exception_handler.cc",
    # "handler/win/crash_report_exception_handler.h",
]
# endif()

thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "minidump/minidump_annotation_writer.cc",
    "minidump/minidump_byte_array_writer.cc",
    "minidump/minidump_context_writer.cc",
    "minidump/minidump_crashpad_info_writer.cc",
    "minidump/minidump_exception_writer.cc",
    "minidump/minidump_extensions.cc",
    "minidump/minidump_file_writer.cc",
    "minidump/minidump_handle_writer.cc",
    "minidump/minidump_memory_info_writer.cc",
    "minidump/minidump_memory_writer.cc",
    "minidump/minidump_misc_info_writer.cc",
    "minidump/minidump_module_crashpad_info_writer.cc",
    "minidump/minidump_module_writer.cc",
    "minidump/minidump_rva_list_writer.cc",
    "minidump/minidump_simple_string_dictionary_writer.cc",
    "minidump/minidump_stream_writer.cc",
    "minidump/minidump_string_writer.cc",
    "minidump/minidump_system_info_writer.cc",
    "minidump/minidump_thread_id_map.cc",
    "minidump/minidump_thread_writer.cc",
    "minidump/minidump_unloaded_module_writer.cc",
    "minidump/minidump_user_extension_stream_data_source.cc",
    "minidump/minidump_user_stream_writer.cc",
    "minidump/minidump_writable.cc",
    "minidump/minidump_writer_util.cc",
]

thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "util/file/delimited_file_reader.cc",
    "util/file/file_io.cc",
    "util/file/file_reader.cc",
    "util/file/file_seeker.cc",
    "util/file/file_writer.cc",
    "util/file/scoped_remove_file.cc",
    "util/file/string_file.cc",
    "util/misc/initialization_state_dcheck.cc",
    # "util/misc/initialization_state_dcheck.h",
    "util/misc/lexing.cc",
    # "util/misc/lexing.h",
    "util/misc/metrics.cc",
    # "util/misc/metrics.h",
    # "util/misc/paths.h",
    "util/misc/pdb_structures.cc",
    # "util/misc/pdb_structures.h",
    "util/misc/random_string.cc",
    # "util/misc/random_string.h",
    "util/misc/range_set.cc",
    # "util/misc/range_set.h",
    "util/misc/reinterpret_bytes.cc",
    # "util/misc/reinterpret_bytes.h",
    "util/misc/scoped_forbid_return.cc",
    # "util/misc/scoped_forbid_return.h",
    # "util/misc/symbolic_constants_common.h",
    "util/misc/time.cc",
    # "util/misc/time.h",
    # "util/misc/tri_state.h",
    "util/misc/uuid.cc",
    # "util/misc/uuid.h",
    "util/misc/zlib.cc",
    # "util/misc/zlib.h",
    "util/net/http_body.cc",
    # "util/net/http_body.h",
    "util/net/http_body_gzip.cc",
    # "util/net/http_body_gzip.h",
    # "util/net/http_headers.h",
    "util/net/http_multipart_builder.cc",
    # "util/net/http_multipart_builder.h",
    "util/net/http_transport.cc",
    # "util/net/http_transport.h",
    "util/net/url.cc",
    # "util/net/url.h",
    "util/numeric/checked_address_range.cc",
    # "util/numeric/checked_address_range.h",
    # # "util/numeric/checked_range.h",
    # "util/numeric/checked_vm_address_range.h",
    # "util/numeric/in_range_cast.h",
    # "util/numeric/int128.h",
    # "util/numeric/safe_assignment.h",
    "util/stdlib/aligned_allocator.cc",
    # "util/stdlib/aligned_allocator.h",
    # "util/stdlib/map_insert.h",
    # "util/stdlib/objc.h",
    "util/stdlib/string_number_conversion.cc",
    # "util/stdlib/string_number_conversion.h",
    "util/stdlib/strlcpy.cc",
    # "util/stdlib/strlcpy.h",
    "util/stdlib/strnlen.cc",
    # "util/stdlib/strnlen.h",
    # "util/stdlib/thread_safe_vector.h",
    "util/string/split_string.cc",
    # "util/string/split_string.h",
    # "util/synchronization/semaphore.h",
    # "util/thread/stoppable.h",
    "util/thread/thread.cc",
    # "util/thread/thread.h",
    "util/thread/thread_log_messages.cc",
    # "util/thread/thread_log_messages.h",
    "util/thread/worker_thread.cc",
    # "util/thread/worker_thread.h",
]

# if(UNIX)
#     list(
#         APPEND
#         util_sources
#         "util/file/directory_reader_posix.cc",
#         "util/file/file_io_posix.cc",
#         "util/file/filesystem_posix.cc",
#         "util/misc/clock_posix.cc",
#         "util/posix/close_stdio.cc",
#         "util/posix/close_stdio.h",
#         "util/posix/scoped_dir.cc",
#         "util/posix/scoped_dir.h",
#         "util/posix/scoped_mmap.cc",
#         "util/posix/scoped_mmap.h",
#         "util/posix/signals.cc",
#         "util/posix/signals.h",
#         "util/synchronization/semaphore_posix.cc",
#         "util/thread/thread_posix.cc",
#     )
# endif()

# if(APPLE)
#     list(
#         APPEND
#         util_sources
#         "util/mac/checked_mach_address_range.h",
#         "util/mac/launchd.h",
#         "util/mac/launchd.mm
#         "util/mac/mac_util.cc",
#         "util/mac/mac_util.h",
#         "util/mac/service_management.cc",
#         "util/mac/service_management.h",
#         "util/mac/xattr.cc",
#         "util/mac/xattr.h",
#         "util/mach/child_port_handshake.cc",
#         "util/mach/child_port_handshake.h",
#         "util/mach/child_port_server.cc",
#         "util/mach/child_port_server.h",
#         "util/mach/child_port_types.h",
#         "util/mach/composite_mach_message_server.cc",
#         "util/mach/composite_mach_message_server.h",
#         "util/mach/exc_client_variants.cc",
#         "util/mach/exc_client_variants.h",
#         "util/mach/exc_server_variants.cc",
#         "util/mach/exc_server_variants.h",
#         "util/mach/exception_behaviors.cc",
#         "util/mach/exception_behaviors.h",
#         "util/mach/exception_ports.cc",
#         "util/mach/exception_ports.h",
#         "util/mach/exception_types.cc",
#         "util/mach/exception_types.h",
#         "util/mach/mach_extensions.cc",
#         "util/mach/mach_extensions.h",
#         "util/mach/mach_message.cc",
#         "util/mach/mach_message.h",
#         "util/mach/mach_message_server.cc",
#         "util/mach/mach_message_server.h",
#         "util/mach/notify_server.cc",
#         "util/mach/notify_server.h",
#         "util/mach/scoped_task_suspend.cc",
#         "util/mach/scoped_task_suspend.h",
#         "util/mach/symbolic_constants_mach.cc",
#         "util/mach/symbolic_constants_mach.h",
#         "util/mach/task_for_pid.cc",
#         "util/mach/task_for_pid.h",
#         "util/mach/task_memory.cc",
#         "util/mach/task_memory.h",
#         "util/misc/capture_context_mac.S
#         "util/misc/clock_mac.cc",
#         "util/misc/paths_mac.cc",
#         "util/net/http_transport_mac.mm
#         "util/posix/process_info_mac.cc",
#         "util/synchronization/semaphore_mac.cc",
#     )
# endif()

# if(UNIX AND NOT APPLE)
#     list(
#         APPEND
#         util_sources
#         "util/net/http_transport_socket.cc",
#         "util/linux/address_types.h",
#         "util/linux/auxiliary_vector.cc",
#         "util/linux/auxiliary_vector.h",
#         "util/linux/checked_linux_address_range.h",
#         "util/linux/direct_ptrace_connection.cc",
#         "util/linux/direct_ptrace_connection.h",
#         "util/linux/exception_handler_client.cc",
#         "util/linux/exception_handler_client.h",
#         "util/linux/exception_handler_protocol.cc",
#         "util/linux/exception_handler_protocol.h",
#         "util/linux/exception_information.h",
#         "util/linux/memory_map.cc",
#         "util/linux/memory_map.h",
#         "util/linux/proc_stat_reader.cc",
#         "util/linux/proc_stat_reader.h",
#         "util/linux/ptrace_broker.cc",
#         "util/linux/ptrace_broker.h",
#         "util/linux/ptrace_client.cc",
#         "util/linux/ptrace_client.h",
#         "util/linux/ptrace_connection.h",
#         "util/linux/ptracer.cc",
#         "util/linux/ptracer.h",
#         "util/linux/scoped_pr_set_ptracer.cc",
#         "util/linux/scoped_pr_set_ptracer.h",
#         "util/linux/scoped_ptrace_attach.cc",
#         "util/linux/scoped_ptrace_attach.h",
#         "util/linux/thread_info.cc",
#         "util/linux/thread_info.h",
#         "util/linux/traits.h",
#         "util/misc/capture_context_linux.S
#         "util/misc/paths_linux.cc",
#         "util/posix/process_info_linux.cc",
#         "util/process/process_memory_linux.cc",
#         "util/process/process_memory_linux.h",
#         "util/process/process_memory.cc",
#         "util/process/process_memory.h",
#         "util/process/process_memory_native.h",
#         "util/process/process_memory_range.cc",
#         "util/process/process_memory_range.h",
#     )
# endif()

# if(WIN32)
thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "util/file/directory_reader_win.cc",
    "util/file/file_io_win.cc",
    "util/file/filesystem_win.cc",
    "util/misc/clock_win.cc",
    "util/misc/paths_win.cc",
    "util/misc/time_win.cc",
    "util/net/http_transport_win.cc",
    "util/synchronization/semaphore_win.cc",
    "util/thread/thread_win.cc",
    "util/win/command_line.cc",
    "util/win/critical_section_with_debug_info.cc",
    "util/win/exception_handler_server.cc",
    "util/win/get_function.cc",
    "util/win/get_module_information.cc",
    "util/win/handle.cc",
    "util/win/initial_client_data.cc",
    "util/win/module_version.cc",
    "util/win/nt_internals.cc",
    "util/win/ntstatus_logging.cc",
    "util/win/process_info.cc",
    "util/win/registration_protocol_win.cc",
    "util/win/scoped_handle.cc",
    "util/win/scoped_local_alloc.cc",
    "util/win/scoped_process_suspend.cc",
    "util/win/scoped_set_event.cc",
    "util/win/session_end_watcher.cc",
    "util/misc/capture_context_broken.cc",
    "util/win/safe_terminate_process_broken.cc",
]
# endif()

thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "snapshot/annotation_snapshot.cc",
    "snapshot/capture_memory.cc",
    "snapshot/cpu_context.cc",
    "snapshot/crashpad_info_client_options.cc",
    "snapshot/handle_snapshot.cc",
    "snapshot/memory_snapshot.cc",
    "snapshot/minidump/minidump_annotation_reader.cc",
    "snapshot/minidump/minidump_simple_string_dictionary_reader.cc",
    "snapshot/minidump/minidump_string_list_reader.cc",
    "snapshot/minidump/minidump_string_reader.cc",
    "snapshot/minidump/module_snapshot_minidump.cc",
    "snapshot/minidump/process_snapshot_minidump.cc",
    "snapshot/unloaded_module_snapshot.cc",
    "snapshot/x86/cpuid_reader.cc",
]

# if(UNIX)
#     list(
#         APPEND
#         snapshot_sources
#         posix/timezone.cc",
#         posix/timezone.h",
#     )
# endif()

# if(APPLE)
#     list(
#         APPEND
#         snapshot_sources
#         "snapshot/mac/cpu_context_mac.cc",
#         "snapshot/mac/cpu_context_mac.h",
#         "snapshot/mac/exception_snapshot_mac.cc",
#         "snapshot/mac/exception_snapshot_mac.h",
#         "snapshot/mac/mach_o_image_annotations_reader.cc",
#         "snapshot/mac/mach_o_image_annotations_reader.h",
#         "snapshot/mac/mach_o_image_reader.cc",
#         "snapshot/mac/mach_o_image_reader.h",
#         "snapshot/mac/mach_o_image_segment_reader.cc",
#         "snapshot/mac/mach_o_image_segment_reader.h",
#         "snapshot/mac/mach_o_image_symbol_table_reader.cc",
#         "snapshot/mac/mach_o_image_symbol_table_reader.h",
#         "snapshot/mac/module_snapshot_mac.cc",
#         "snapshot/mac/module_snapshot_mac.h",
#         "snapshot/mac/process_reader_mac.cc",
#         "snapshot/mac/process_reader_mac.h",
#         "snapshot/mac/process_snapshot_mac.cc",
#         "snapshot/mac/process_snapshot_mac.h",
#         "snapshot/mac/process_types.cc",
#         "snapshot/mac/process_types.h",
#         "snapshot/mac/process_types/all.proctype
#         "snapshot/mac/process_types/annotation.proctype
#         "snapshot/mac/process_types/crashpad_info.proctype
#         "snapshot/mac/process_types/crashreporterclient.proctype
#         "snapshot/mac/process_types/custom.cc",
#         "snapshot/mac/process_types/dyld_images.proctype
#         "snapshot/mac/process_types/flavors.h",
#         "snapshot/mac/process_types/internal.h",
#         "snapshot/mac/process_types/loader.proctype
#         "snapshot/mac/process_types/nlist.proctype
#         "snapshot/mac/process_types/traits.h",
#         "snapshot/mac/system_snapshot_mac.cc",
#         "snapshot/mac/system_snapshot_mac.h",
#         "snapshot/mac/thread_snapshot_mac.cc",
#         "snapshot/mac/thread_snapshot_mac.h",
#     )
# endif()

# if(UNIX AND NOT APPLE)
#     list(
#         APPEND
#         snapshot_sources
#         "snapshot/linux/cpu_context_linux.cc",
#         "snapshot/linux/cpu_context_linux.h",
#         "snapshot/linux/debug_rendezvous.cc",
#         "snapshot/linux/debug_rendezvous.h",
#         "snapshot/linux/exception_snapshot_linux.cc",
#         "snapshot/linux/exception_snapshot_linux.h",
#         "snapshot/linux/process_reader_linux.cc",
#         "snapshot/linux/process_reader_linux.h",
#         "snapshot/linux/process_snapshot_linux.cc",
#         "snapshot/linux/process_snapshot_linux.h",
#         "snapshot/linux/signal_context.h",
#         "snapshot/linux/system_snapshot_linux.cc",
#         "snapshot/linux/system_snapshot_linux.h",
#         "snapshot/linux/thread_snapshot_linux.cc",
#         "snapshot/linux/thread_snapshot_linux.h",
#         "snapshot/sanitized/memory_snapshot_sanitized.cc",
#         "snapshot/sanitized/memory_snapshot_sanitized.h",
#         "snapshot/sanitized/module_snapshot_sanitized.cc",
#         "snapshot/sanitized/module_snapshot_sanitized.h",
#         "snapshot/sanitized/process_snapshot_sanitized.cc",
#         "snapshot/sanitized/process_snapshot_sanitized.h",
#         "snapshot/sanitized/sanitization_information.cc",
#         "snapshot/sanitized/sanitization_information.h",
#         "snapshot/sanitized/thread_snapshot_sanitized.cc",
#         "snapshot/sanitized/thread_snapshot_sanitized.h",
#         "snapshot/crashpad_types/crashpad_info_reader.cc",
#         "snapshot/crashpad_types/crashpad_info_reader.h",
#         "snapshot/crashpad_types/image_annotation_reader.cc",
#         "snapshot/crashpad_types/image_annotation_reader.h",
#         "snapshot/elf/elf_dynamic_array_reader.cc",
#         "snapshot/elf/elf_dynamic_array_reader.h",
#         "snapshot/elf/elf_image_reader.cc",
#         "snapshot/elf/elf_image_reader.h",
#         "snapshot/elf/elf_symbol_table_reader.cc",
#         "snapshot/elf/elf_symbol_table_reader.h",
#         "snapshot/elf/module_snapshot_elf.cc",
#         "snapshot/elf/module_snapshot_elf.h",
#     )
# endif()

thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "snapshot/win/capture_memory_delegate_win.cc",
    "snapshot/win/cpu_context_win.cc",
    "snapshot/win/exception_snapshot_win.cc",
    "snapshot/win/memory_map_region_snapshot_win.cc",
    "snapshot/win/memory_snapshot_win.cc",
    "snapshot/win/module_snapshot_win.cc",
    "snapshot/win/pe_image_annotations_reader.cc",
    "snapshot/win/pe_image_reader.cc",
    "snapshot/win/pe_image_resource_reader.cc",
    "snapshot/win/process_reader_win.cc",
    "snapshot/win/process_snapshot_win.cc",
    "snapshot/win/process_subrange_reader.cc",
    "snapshot/win/system_snapshot_win.cc",
    "snapshot/win/thread_snapshot_win.cc",
]

thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "tools/tool_support.cc",
]

# if(WIN32)
thirdparty_crashpad_sources = thirdparty_crashpad_sources + [
    "third_party/getopt/getopt.cc",
]
# endif()

env_crashpad["CPPPATH"] = [thirdparty_chromium_mini_dir]
env_crashpad.Append(CPPPATH=[thirdparty_crashpad_dir])
env_crashpad.Append(CPPPATH=[thirdparty_crashpad_dir + "client/"])
env_crashpad.Append(CPPPATH=[thirdparty_crashpad_dir + "compat/win/"])
env_crashpad.Append(CPPPATH=["#thirdparty/zlib"])

# # Needed for drivers includes and in platform/javascript
env.Append(CPPPATH=[thirdparty_chromium_mini_dir])
env.Append(CPPPATH=[thirdparty_crashpad_dir])

thirdparty_crashpad_sources = [thirdparty_crashpad_dir + file for file in thirdparty_crashpad_sources]
env_thirdparty = env_crashpad.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(env.drivers_sources, thirdparty_crashpad_sources)

env_crashpad.add_source_files(env.drivers_sources, "*.cpp")
Export("env")
