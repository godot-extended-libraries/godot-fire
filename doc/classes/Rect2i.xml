<?xml version="1.0" encoding="UTF-8" ?>
<class name="Rect2i" version="4.0">
	<brief_description>
		2D axis-aligned bounding box using integer coordinates.
	</brief_description>
	<description>
		[Rect2i] consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.
		It uses integer coordinates. If you need floating-point coordinates, use [Rect2] instead.
	</description>
	<tutorials>
		<link title="Math tutorial index">https://docs.godotengine.org/en/latest/tutorials/math/index.html</link>
	</tutorials>
	<methods>
		<method name="Rect2i">
			<return type="Rect2i">
			</return>
			<argument index="0" name="position" type="Vector2">
			</argument>
			<argument index="1" name="size" type="Vector2">
			</argument>
			<description>
				Constructs a [Rect2i] by position and size.
			</description>
		</method>
		<method name="Rect2i">
			<return type="Rect2i">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="width" type="int">
			</argument>
			<argument index="3" name="height" type="int">
			</argument>
			<description>
				Constructs a [Rect2i] by x, y, width, and height.
			</description>
		</method>
		<method name="Rect2i">
			<return type="Rect2i">
			</return>
			<argument index="0" name="from" type="Rect2">
			</argument>
			<description>
				Constructs a new [Rect2i] from [Rect2]. The floating point coordinates will be truncated.
			</description>
		</method>
		<method name="abs">
			<return type="Rect2i">
			</return>
			<description>
				Returns a [Rect2i] with equivalent position and area, modified so that the top-left corner is the origin and [code]width[/code] and [code]height[/code] are positive.
			</description>
		</method>
		<method name="clip">
			<return type="Rect2i">
			</return>
			<argument index="0" name="b" type="Rect2i">
			</argument>
			<description>
				Returns the intersection of this [Rect2i] and b.
			</description>
		</method>
		<method name="encloses">
			<return type="bool">
			</return>
			<argument index="0" name="b" type="Rect2i">
			</argument>
			<description>
				Returns [code]true[/code] if this [Rect2i] completely encloses another one.
			</description>
		</method>
		<method name="expand">
			<return type="Rect2i">
			</return>
			<argument index="0" name="to" type="Vector2i">
			</argument>
			<description>
				Returns this [Rect2i] expanded to include a given point.
			</description>
		</method>
		<method name="get_area">
			<return type="int">
			</return>
			<description>
				Returns the area of the [Rect2i].
			</description>
		</method>
		<method name="grow">
			<return type="Rect2i">
			</return>
			<argument index="0" name="by" type="int">
			</argument>
			<description>
				Returns a copy of the [Rect2i] grown a given amount of units towards all the sides.
			</description>
		</method>
		<method name="grow_individual">
			<return type="Rect2i">
			</return>
			<argument index="0" name="left" type="int">
			</argument>
			<argument index="1" name="top" type="int">
			</argument>
			<argument index="2" name="right" type="int">
			</argument>
			<argument index="3" name=" bottom" type="int">
			</argument>
			<description>
				Returns a copy of the [Rect2i] grown a given amount of units towards each direction individually.
			</description>
		</method>
		<method name="grow_margin">
			<return type="Rect2i">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="by" type="int">
			</argument>
			<description>
				Returns a copy of the [Rect2i] grown a given amount of units towards the [enum Margin] direction.
			</description>
		</method>
		<method name="has_no_area">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the [Rect2i] is flat or empty.
			</description>
		</method>
		<method name="has_point">
			<return type="bool">
			</return>
			<argument index="0" name="point" type="Vector2i">
			</argument>
			<description>
				Returns [code]true[/code] if the [Rect2i] contains a point.
			</description>
		</method>
		<method name="intersects">
			<return type="bool">
			</return>
			<argument index="0" name="b" type="Rect2i">
			</argument>
			<description>
				Returns [code]true[/code] if the [Rect2i] overlaps with [code]b[/code] (i.e. they have at least one point in common).
				If [code]include_borders[/code] is [code]true[/code], they will also be considered overlapping if their borders touch, even without intersection.
			</description>
		</method>
		<method name="merge">
			<return type="Rect2i">
			</return>
			<argument index="0" name="b" type="Rect2i">
			</argument>
			<description>
				Returns a larger [Rect2i] that contains this [Rect2i] and [code]b[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="end" type="Vector2i" setter="" getter="" default="Vector2i( 0, 0 )">
			Ending corner. This is calculated as [code]position + size[/code]. Setting this value will change the size.
		</member>
		<member name="position" type="Vector2i" setter="" getter="" default="Vector2i( 0, 0 )">
			Beginning corner. Typically has values lower than [member end].
		</member>
		<member name="size" type="Vector2i" setter="" getter="" default="Vector2i( 0, 0 )">
			Size from [member position] to [member end]. Typically all components are positive.
			If the size is negative, you can use [method abs] to fix it.
		</member>
	</members>
	<constants>
	</constants>
</class>
